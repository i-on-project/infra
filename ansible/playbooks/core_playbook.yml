- name: Install Common Dependencies
  hosts: all
  become: true
  tasks:
    - name: Update aptitude repositories
      shell: apt update
    - name: Install docker and docker-compose
      shell: apt install docker docker-compose -y
    - name: Check docker status
      service:
        name: docker
        state: started
        enabled: true
    - name: Install git
      shell: apt install git -y

- name: Install Web Dependencies
  hosts: web
  become: true
  vars_files:
    - ../vars/core-vars.yml
  tasks:
    - name: Install nginx
      shell: apt install nginx -y
    - name: Delete active virtual host configurations
      shell: rm -f /etc/nginx/sites-enabled/*
    - name: Copy nginx virtual host configuration
      copy:
        src: "../../{{ nginx_config_path }}"
        dest: /etc/nginx/sites-available/
    - name: Set appropriate server_name
      lineinfile:
        path: "/etc/nginx/sites-available/{{ nginx_config_name }}"
        regexp: "(server\\_name\\s\\_;)+"
        line: "server_name {{ domain }} www.{{ domain }};"
        state: present
    - name: Create virtual host symlink
      file:
        path: "/etc/nginx/sites-enabled/{{ nginx_config_name }}"
        src: "/etc/nginx/sites-available/{{ nginx_config_name }}"
        state: link
    - name: Check snapd status
      service:
        name: snapd
        state: started
    - name: Install snap core latest version
      shell: snap install core || snap refresh core
    - name: Install certbot
      shell: snap install --classic certbot
    - name: Create certbot symlink
      file:
        path: /usr/bin/certbot
        src: /snap/bin/certbot
        state: link
    - name: Ensure certbot containment level
      shell: snap set certbot trust-plugin-with-root=ok
    - name: Install cloudflare dns plugin
      shell: snap install certbot-dns-cloudflare
    - name: Copy cloudflare credentials
      copy:
        src: "../../{{cloudflare_credentials_file}}"
        dest: ./cf_credentials.ini
        mode: 0600
    - name: Run certbot
      shell: >
        certbot -i nginx -a dns-cloudflare
        --dns-cloudflare-credentials ./cf_credentials.ini
        --dns-cloudflare-propagation-seconds 60
        -d {{domain}}
        -m {{certbot_email_address}}
        --agree-tos
        --non-interactive
    - name: Check nginx status
      service:
        name: nginx
        state: reloaded
        enabled: true

- name: Install Database Dependencies
  hosts: database
  become: true
  tasks:
    - name: Install postgresql
      shell: apt install postgresql -y
    - name: Retrieve PostgreSQL version
      shell: ls /etc/postgresql
      register: postgres_result
    - name: Set POSTGRES_VERSION fact
      set_fact:
        POSTGRES_VERSION: "{{ postgres_result.stdout }}"
    - name: Set listen_addresses to all
      lineinfile:
        path: "/etc/postgresql/{{ POSTGRES_VERSION }}/main/postgresql.conf"
        line: "listen_addresses='*'"
    - name: Allow login from docker0 interface
      lineinfile:
        path: "/etc/postgresql/{{ POSTGRES_VERSION }}/main/pg_hba.conf"
        line: "host all all 172.17.0.1/16 md5"
    - name: Check postgresql status
      service:
        name: postgresql
        state: restarted
        enabled: true

- name: Configure Database
  hosts: database
  become: true
  vars_files:
    - ../vars/core-secrets.yml
  tasks:
    - name: Create new database user
      shell: "sudo -u postgres createuser {{database_user}} || true"
    - name: Create new database table
      shell: "sudo -u postgres createdb -U postgres {{database_db}} || true"
    - name: Change user password
      shell: "sudo -u postgres psql -c \"alter user {{database_user}} with encrypted password '{{database_password}}';\""
    - name: Grant database permissions to user
      shell: "sudo -u postgres psql -c \"grant all privileges on database {{database_db}} to {{database_user}};\""
    - name: Check postgres user
      shell: "echo \"\\q\" | PGPASSWORD={{database_password}} psql -h localhost -U {{database_user}}"

- name: Setup Automatic Deployment
  hosts: web
  become: true
  vars_files:
    - ../vars/core-vars.yml
    - ../vars/core-secrets.yml
  tasks:
    - name: Create Environment File
      shell: touch {{ env_prod_name }}
    - name: Add JDBC_DATABASE_URL
      lineinfile:
        path: "./{{ env_prod_name }}"
        line: "JDBC_DATABASE_URL=jdbc:postgresql://host.docker.internal:{{ database_port }}/{{ database_db }}?user={{ database_user }}&password={{ database_password }}"
    - name: Add ION_CORE_SECRET_KEY
      lineinfile:
        path: "./{{ env_prod_name }}"
        line: "ION_CORE_SECRET_KEY={{ ion_core_secret_key }}"
    - name: Add ION_CORE_BASE_URL
      lineinfile:
        path: "./{{ env_prod_name }}"
        line: "ION_CORE_BASE_URL={{ ion_core_base_url }}"
    - name: Add SENDGRID_API_KEY
      lineinfile:
        path: "./{{ env_prod_name }}"
        line: "SENDGRID_API_KEY={{ sendgrid_api_key }}"
    - name: Add EMAIL_SENDER_EMAIL
      lineinfile:
        path: "./{{ env_prod_name }}"
        line: "EMAIL_SENDER_EMAIL={{ certbot_email_address }}"
    - name: Add EMAIL_SENDER_NAME
      lineinfile:
        path: "./{{ env_prod_name }}"
        line: "EMAIL_SENDER_NAME={{ certbot_email_name }}"
    - name: Add INTEGRATION_REPOSITORY_REMOTE
      lineinfile:
        path: "./{{ env_prod_name }}"
        line: "INTEGRATION_REPOSITORY_REMOTE={{ integration_repo_remote }}"
    - name: Run Deployment
      shell: >
        docker run --name ion-core
        --env-file ./{{ env_prod_name }}
        --add-host host.docker.internal:host-gateway
        -p 8080:8080
        -d {{ image_name }}